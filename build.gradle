plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '1.0.17' // Keep the version from the MDK guide
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
    maven {
        name = "NeoForge Maven"
        url = "https://maven.neoforged.net/releases" // Official NeoForge maven
    }
}

base {
    archivesName = mod_id // Archive will be named based on mod_id
}

// Set the Java toolchain to 21, required for Minecraft 1.21.x
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = '21.1.58' // Update to NeoForge 1.21.58

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id // Game tests enabled for client
        }
        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }
        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }
        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "oquamod" {
            sourceSet(sourceSets.main) // Binding sources to mod
        }
    }
}

// Include generated resources for data generation
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime // Local runtime for optional mods
}

dependencies {
    // Example: JEI dependencies can go here if needed
    // compileOnly "mezz.jei:jei-${mc_version}-common-api:${jei_version}"
    // localRuntime "mezz.jei:jei-${mc_version}-neoforge:${jei_version}"
}

// Task to generate mod metadata
tasks.register("generateModMetadata", ProcessResources) {
    inputs.properties([
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ])
    expand inputs.properties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

// Include generated mod metadata in resources
sourceSets.main.resources.srcDir tasks.named("generateModMetadata")
neoForge.ideSyncTask tasks.named("generateModMetadata")

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url = "file://${project.projectDir}/repo" // Local repo
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Ensure UTF-8 encoding
    options.compilerArgs << "-Xlint:deprecation"
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
